***************************************************************************
*                                                                         *
*  COMPOSE !                                                              *
*  ---------                                                              *
*    ein erweiterter flexibler Tastaturtreiber fÅr Atari-Computer         *
*    von:    Pascal Fellerich                                             *
*            45, rue des Genàts                                           *
*            L-3482 Dudelange                                             *
*                                                                         *
*  > Dieses Programm ist _Freeware_. Die Dateien                          *
*            COMPOSE.PRG      (residentes Teil, TSR)                      *
*            COMPOSE.CPX      (Konfigurationsmodul, CPX)                  *
*            COMPOSE.TXT      (Diese Anleitung)                           *
*    gehîren zusammen und dÅrfen nicht verÑndert werden.                  *
*                                                                         *
*                                                                         *
*                                                                         *
*  TSR v1.0, 10.2.1992                                                    *
*  CPX x0.8,  8.2.1992                                                    *
***************************************************************************




Vorwort:
--------

  Man kennt das Problem: ein franzîsischer Text soll auf einer
deutschen Tastatur eingegeben werden. Die entsprechende
Tastaturbelegung nachladen? Ein Hochgenuû! Wer schon einmal
die VorzÅge einer AZERTY-Tastatur ausgekostet hat, weiû wovon ich
schreibe!

  Hier kommt COMPOSE ins Spiel. Mit diesem Programm ist es mîglich,
alle im Zeichensatz vorhandenen Sonderzeichen mit logischen
Tastenkombinationen zu erreichen.

  COMPOSE ist aber auch konfigurierbar, so daû die ausgefallensten
SystemzeichensÑtze auch kein Hindernis darstellen.

  COMPOSE ist Freeware. Das bedeutet, daû die vorliegende Software
    * gebÅhrenfrei benutzt werden darf
    * nicht verkauft werden kann
    * als 'Zugabe' mit kommerzieller Software verteilt werden darf
  Fehlermeldungen, Anregungen und neue CKB-Tabellen kînnen wie immer an
meine Adresse geschickt werden (siehe oben).


  Die vorliegende Anleitung besteht aus vier Teilen:
1. USERMANUAL (kurz & einfach) mit BugList
2. PROGRAMMERS MANUAL (etwas lÑnglich :-)
3. A1: Richtig Programmieren...
4. A2: STANDARD-COMPOSE-TABELLE.


  AN ALLE PROGRAMMIERER: BITTE ANHANG 1 LESEN!!!!
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




USERMANUAL
=======================================================================

Installation:
-------------
  COMPOSE.PRG kommt am besten in den AUTO-Ordner. Es verankert sich
resident im System und kann spÑter umkonfiguriert werden.

  COMPOSE.CPX ist ein CPX-Modul fÅr das Modulare Kontrollfeld
'XCONTROL.ACC' von Atari. Es gehîrt in den 'CPX'-Ordner auf der
Festplatte. Dieses CPX ermîglicht es, das eigentliche residente
Programm zu beliebigen Zeitpunkten umzukonfigurieren. Auûerdem kann
standardmÑûig eine andere Tastaturbelegung geladen werden (beide
Formate!)

  Es gibt auch die Mîglichkeit, eine Tastatur-Tabellen-Datei namens
'AUTOLOAD.CKB' in das Wurzelverzeichnis zu kopieren. Die wird von
COMPOSE.PRG automatisch nachgeladen und installiert. Das ist
interessant fÅr jene, die XCONTROL nicht haben...



Benutzung des Programmes:
-------------------------
  COMPOSE bietet drei verschiedene Mîglichkeiten zur Zusammensetzung
von Sonderzeichen:

  1. ExtKey: Das vom 'Original-Extkey' (von Alex Esser) und JAMES.ACC
     bekannte Verfahren. Die Idee: ein Sonderzeichen setzt sich
     zusammen aus einem Haupt und einem Nebenzeichen. Beispielsweise
     kann ein 'ì' aus einem 'o' und einem '^' zusammengesetzt werden.
     Dabei tippt man zuerst das Hauptzeichen ('o'), dann das
     Nebenzeichen mit gedrÅckter Control-Taste! - also CONTROL-'^'.
     Dann verschwindet das 'o' und es wird durch ein 'ì' ersetzt.
     Die Reihenfolge Primar, SekundÑrzeichen ist einzuhalten.


  2. Composed Characters: Dieses Verfahren basiert auf der gleichen
     Idee und es stammt von der Firma DEC (Digital Equipment
     Corporation), die fÅr ihre VAX-Rechner bekannt sein dÅrfte.
     Dort wo der Atari seine 'ALTERNATE'-Taste hat, befindet sich bei
     den Terminals der VT2xx-Serie die sogenannte Compose-Taste. Um
     hier ein Sonderzeichen zusammenzusetzten muû zuerst 'Compose'
     betÑtigt werden, dann die zwei Zeichen. Also:
        Compose, 'i', 'j'  ergibt '¿'.
     Beim Atari gilt analog:
        ALTERNATE kurz drÅcken, 'i', 'j'  ergibt dann '¿'.
     WICHTIG ist, daû die Alternate Taste kurz betÑtigt wird, ohne
     dabei eine sonstige Taste zu betÑtigen (shift, control, etc.).
     Denn eine Tastenkombination wie ALT-Q darf nicht gestîrt werden!

     Wenn eine Compose-Sequenz erfolgreich begonnen wurde, dann ertînt
     ein Tastaturklick (auch wenn der 'normale' Tastaturklick
     abgeschaltet wurde).

     Wenn eine Compose-Sequenz ungÅltig war ('z' und 'x' ergibt nichts
     sinvolles), dann ertînt die 'Glocke' (Bell), ungeachtet ob sie
     abgeschaltet war oder nicht.

     Eine begonnene Compose-Sequenz wird abgebrochen durch ESC,
     BackSpace oder eine beliebige andere Taste, die keinen ASCII-Code
     besitzt (F-taste, Cursortaste etc).

     Die Reihenfolge der beiden PrimÑrzeichen spielt keine Rolle. öber
     das CPX kann diese Verhalten geÑndert werden.


  3. ALT-NNN: Die Lieblingsmethode fÅr Bithacker und MS-DOS-Freaks.
     Alternate drÅcken und den enstprechenden ASCII-Code dezimal auf
     dem Zehnerblock eingeben. Diese Funktion ist eher der
     VollstÑndigkeit halber mit implementiert; ab TOS 2.06 / 3.06 ist
     sie schon im TOS drin.



Benutzung des CPX:
------------------
  In der Infozeile erscheint die CPX-Version, das Erstellungsdatum
sowie der name des Autors (meiner also.... wow....)

  In der linken HÑlfte befinden sich vier Knîpfe, die mit
        Compose
        Extkey
        ALT-nnn
        neue Keytab
  bezeichnet sind. Damit werden die einzelnen Funktionen des residenten
Programms aktiviert. Die ersten drei entsprechen den drei oben
erklÑrten Verfahren zur Erzeugung von Sonderzeichen; der vierte
Schalter hat nur Sinn, wenn auch eine andere Tastaturbelegung geladen
ist.

  Auf gleicher Hîhe in der linken HÑlfte, unter der öberschrift
'Compose Modus' sind zwei Popup-MenÅs versteckt. Damit wird das
'Benehmen' der Compose-Funktion eingestellt. Der ersten Knopf schaltet
zwischen
        > DEC (VT2xx) Mode              und
        > MultiChar Mode                um.
  DEC Mode: Die Compose-Funktion erwartet nach Auslîsen einer Compose
Sequenz zwei Buchstaben. Die werden 'verschluckt', und nur das
eventuell erzeugte Sonderzeichen erscheint auf dem Bildschirm. Dieses
Verfahren ist sehr vertrÑglich mit kritischen Programmen (-> siehe
Liste)
  MultiChar Mode: Nun werden die eingegebenen Zeichen nicht mehr
unterdrÅckt, dafÅr wird genau wie bei Extkey zuerst ein Backspace und
dann das neue Zeichen geschickt. In diesem Modus ist eine
Compose-Sequenz nach zwei Zeichen nicht zwingend abgeschlossen. Die
Tabelle 'VIETNAM' benutzt diese Besonderheit - sie enthÑlt 3-fach
zusammengesetzte Zeichen!


  Das zweite Popup-MenÅ schaltet zwischen
        > Order indifferent             und
        > Order sensitive               um.
Order sensitive bedeutet, daû Compose genau wie Extkey nun die richtige
Reihenfolge bei den Eingabezeichen erwartet. Die Sequenz ALT/^/o wird
nicht erkannt, es muû schon ALT/o/^ lauten. Normal ist aber der Modus
'order indifferent'.


  In der dritten Zelle ist der Name der aktuell geladenen Datei
angegeben. Falls keine geladen ist, steht hier die Angabe
'---system---'. Nur wenn eine andere Datei geladen ist, ist der oben
erwÑhnte Schalter 'Neue Keytab' gÅltig.

  Schlieûlich ist unter dem Knopf 'exec' noch ein drittes Popup-MenÅ
eingebaut, das die Punkte
        1> Lade *.KBD
        2> Lade Compose-Tab
        3> Systemtabelle!
enthÑlt.
1) lÑdt eine 384-byte groûe Tastatur-Umbelegungstabelle nach. Beispiele
fÅr solche Dateien des alten Formats (wie von JAMES.ACC benutzt) liegen
im Ordner CKB_KBD.
2) lÑdt die neuen CKB-Dateien. Diese enthalten neben einer
(optionalen!) Umbelegungstabelle auch andere Compose-Tabellen.
3) Wenn alles schiefgeht - oder wenn das CPX beim Booten _keine_ Datei
mehr nachladen soll, kann hiermit die geladene Datei entfernt und
unschÑdlich gemacht werden.



  Die restlichen Bedienelemente sind CPX-Standard, sollten bekannt
sein.




Hinweise:
---------
  Utilities, die Ñhnliche Funktionen haben, sollten besser
entfernt/abgeschaltet werden. Bei JAMES.ACC also 'Extkey' ausschalten.

  Leider gibt es immer noch Programme, die zusammengesetzte Zeichen
nicht akzeptierten oder sogar fehlerhaft darauf reagieren! Das ist dann
eher die Schuld des Hauptprogramms als die von COMPOSE.

  Das CPX-Modul lÑuft erst ab TOS 1.4. Sorry, aber:
    WER XCONTROL MIT TOS 1.0 ODER TOS 1.2 BENUTZT WIRD MIT
    BOMBEN NICHT UNTER 5 STöCK BESTRAFT!!

  Kleiner Trost: COMPOSE.PRG selbst lÑuft auf allen TOS Versionen. Da
die Schnittstelle zu Compose.prg genau festgelegt ist, dÅrfte es ein
Leichtes sein, ein eigenes Steuer-ACC zu basteln (mir fehlt dafÅr die
Zeit)!




Problemkinder:
--------------
  Proggie:                      Problemchen:

  TURBO C / PURE C Editor       Extkey-modus geht nicht)
  1.10 < TEMPUS < 2.10          Nix geht. Tempus muû erst gepatcht
                                werden
  TEMPUS Ú2.10                  Extkey erst nach Umbelegung von
                                       CONTROL-Backspace in Tempus!)
  EDISON                        Extkey geht nicht.
  7UP (shareware editor)        id.
  CYPRESS                       id.
  WORDFLAIR 1                   id.
  MAXON PASCAL Editor           Compose und ALT-nnn geht nicht, dafÅr
                                Extkey!
  NKCC-Routinen                 ALT-nnn mit nnn<32 ergibt Falschmeldung,
                                bei Compose wird die ALT-Taste als
                                gedrÅckt gemeldet.



Bekannte Fehler:
----------------
CPX:
    v0.8:   -keine-
    v0.7:   Fileselector gibt falsche Pfade an
    v0.1:   Testversion

TSR:
    v1.0    -keine-
    v0.9:   unter TOS 1.0 .. 1.4 stÅrzte das System beim BetÑtigen der
            ALT-Taste manchmal ab. Ursache: die (nicht genug bekannte)
            Schlamperei im XBIOS-Dispatcher des TOS. Mit KAOS 1.4.2
            sowie mit TOS >1.6 klappte es.
    v0.8:   Zeiger wurden falsch gesetzt -> beseitigt
    v0.7:   erste îffentliche Version

=======================================================================


PROGRAMMERS MANUAL
=======================================================================


Technische Spezifikationen:
---------------------------

* XBRA:     'CKBD'      (Composed characters KeyBoard Driver)
* COOKIE:   'CKBD'

* VERBOGENE VEKTOREN:
        IKBDSYS             (immer)
        resvector           (nur TOSse ohne Cookie Jar)
        kcl_hook, bell_hook (nur TOS unter 1.6, KAOS unter 1.4.1)

* COOKIE-JAR Belegung:
        Zeiger auf einen Funktionsdispatcher.
        C-Deklaration:
            long cdecl ckbd( int opcode, ... );

        Vorhandene Funktionen:
            IDENTIFY,   EXTKEY,
            COMPOSE,    ALT_NNN,
            CKEYTBL,    CBIOSKEYS

* SYSTEM-EINSCHRéNKUNGEN:
        Die XBIOS-Funktionen Keytbl() und Bioskeys() sollten durch die
        COMPOSE-eigenen Calls
            ckbd(CKEYTBL, ...)    und   ckbd(CBIOSKEYS, ...)
        ersetzt werden. Ansonsten kann es zu InkohÑrenzen bei der
        Auswertung der Tastaturwerte seitens COMPOSE kommen.
        COMPOSE hÑngt sich trotzdem nicht in den XBIOS Trap, da durch
        solche 'Kleinigkeiten' das System unnîtig belastet wÅrde.



Funktionsdefinitionen & Beschreibung:
-------------------------------------

* In der Datei CKBD.H sind folgende Defs auch drin; auûerdem werden
dort die numerischen Werte fÅr die Opcodes festgelegt.


IDENTIFY
    Aufruf:     id_string=(const char *)ckbd(IDENTIFY);
    id_string:  ASCII String, enthÑlt u.a. die Versionsnummer im Format
                'v', Version, '.', Revision.


EXTKEY          bestimmt den Extkey-Funktionsmodus
    Aufruf:     oldmode=ckbd(EXTKEY, newmode);
    newmode:    WORD, -1 -> no change (INQUIRE)
                      0  -> OFF
                      1  -> ON
    oldmode:    LONG, vorheriger Wert von mode


COMPOSE         bestimmt den COMPOSE-Modus
    Aufruf:     oldmode=ckbd(COMPOSE, newmode);
    newmode:    WORD, -1 -> no change (INQUIRE)
                    Ú 0 -> bitmapped.
                       bit #0:     OFF (NOT SET) / ON (BIT SET)
                       bit #1:     DEC/MULTICHAR MODE
                       bit #2:     ORDER SENSITIVE NO/YES
    oldmode:    vorheriger Wert von mode


ALT_NNN         verwaltet die MSDOS-ALT-ASCII Funktion.
    Aufruf:     oldmode=ckbd(ALT_NNN, newmode);
    newmode:    WORD, -1 (INQUIRE), 0 (OFF), 1 (ON)
    oldmode:    vorheriger Wert von mode


CKEYTBL         verwaltet die Tastaturtabellen, ersetzt XBIOS Keytbl().
    Die so installierten Tabellen werden in einen internen Puffer
    umkopiert, so daû der Aufrufer die Tabellen nicht im RAM halten
    muû. Somit kînnen auch Accessories gefahrlos Tastaturumbelegungen
    Åber COMPOSE vornehmen.

    Aufruf:     kt_ret=(const XKEYTAB *)ckbd(CKEYTBL, unshift, shift,
                                                       caps, compose);
    unshift:    CHAR *, Zeiger auf eine 'normale'
                Tastatur-belegungstabelle wie bei XBIOS Keytbl()
    shift:      CHAR *, id, fÅr SHIFT-Belegung.
    caps:       CHAR *, id, fÅr CAPSLOCK-Belegung.
    compose:    comptab *, Zeiger auf eine Compose-Tabelle
    name:       Zeiger auf const char name.
    kt_ret:     const XKEYTAB *, Zeiger auf eine erweiterte KEYTAB-
                Struktur (Ñhnlich XBIOS!)

    Wenn ein Zeiger NULL oder -1L ist, wird nichts verÑndert!

    Verwendete Strukturen:
       struct {
           char    *unshift;
           char    *shift;
           char    *caps;       /* bis hierhin identisch mit TOS... */
           comptab *compose;    /* neues Element */
           char    *name;       /* Name der aktiven Tabelle oder '---system---' */
       } XKEYTAB;

       struct {
           char    primary;     /* erster Buchstabe */
           char    secondary;   /* plus 2. Buchstabe */
           char    composed;    /* ergibt diesen char ! */
           char    reserved;    /* z.Zt. reserviert, auf NULL setzen */
       } comptab;

    EinschrÑnkungen:
        die COMPOSE-Tabelle, die mit (comptab *) Åbergeben wird, darf
        maximal 256 EintrÑge umfassen. Bei grîûeren Tabellen wird ein
        Fehler zurÅckgemeldet (negativer LONG-Wert)


CBIOSKEYS       setzt die Originaltabellen wieder ein. Diese Funktion
        sollte anstelle der XBIOS Bioskeys()-Funktion benutzt werden,
        da nur so auch die COMPOSE-Tabellen wieder restauriert werden.
        Als Erweiterung bietet CBIOSKEYS die Mîglichkeit, auch wieder
        auf die zuletzt geladenen Tabellen zurÅckzuschalten.
    Aufruf:     bk_ret=ckbd(CBIOSKEYS, switch);
    switch:     WORD,   -1= No Change (INQUIRE)
                        >=0: bitmapped.
                        bit #0: keyboard translation table - SET: use new
                        bit #1: compose tables             - SET: use new
    bk_ret:     WORD, letzte Einstellung.





Datenstrukturen:
----------------

  1. die Tastaturbelegungstabellen:
        char unshift_table[128];
        ...
     Sie enthalten die ASCII Codes die den jeweiligen Scancodes der
     Tastatur zugeordnet sind.

  2. die Compose-Tabellen:
        struct {
           char    primary;     /* erster Buchstabe */
           char    secondary;   /* plus 2. Buchstabe */
           char    composed;    /* ergibt diesen char ! */
           char    reserved;    /* z.Zt. reserviert, auf NULL setzen */
        } comptab[];
     Sie enthalten alle mîglichen Kombinationen. Die unter primary,
     secondary und composed angegebenen Werte sind ASCII-Codes (und
     somit unabhÑngig vom verwendeten Tastaturlayout)

     Die Tabelle kann jede LÑnge zwischen 2 und 256 EintrÑgen annehmen;
     das Ende der Tabelle wird an einem Null-Eintrag erkannt.
     Andersrum: der letzte Eintrag besteht aus vier Nullbytes
     (ZWINGEND!)

     Der 'reserved' char wird evtl. Flags enthalten, die im
     Multichar-compose Betrieb das Ende einer Mehrfach-sequenz angeben.

  3. die AUTOLOAD.CKB - Datei:
    (vorlÑufiges Format: zur Zeit durch das CPX vorgegeben)
     struct {
        char    id[4]="CKBD";       /* identifier */
        char    name[12]="..."      /* eigene Bezeichnung */
        int     unshift_offset,     /* Offset relativ zum Datei-    */
                shift_offset,       /* Anfang, bei dem die          */
                caps_offset,        /* entsprechende Tabelle        */
                compose_offset;     /* beginnt.                     */
        int     compose_mode;       /* mode-Wert fÅr COMPOSE(mode)  */
                                    /* wird nur bei AUTOLOAD beachtet */
     } CKB_FILE_HEADER;

     Auf diese Struktur folgen dann die (vorhandenen) Tabellen. Die
     Reihenfolge ist egal. Nicht vorhandene Tabellen werden anhand
     eines offset_-Wertes NULL erkannt.



-----------------------------------------------------------------------


ANHANG 1:
RICHTIG PROGRAMMIEREN
=======================================================================

  Jedesmal, wenn eine etwas leistungsfÑhigere Tastaturabfrage in einem
Programm benîtigt wird, steht der 08/15 Programmierer (und
wahrscheinlich nicht nur der!) vor einem Problem. Wie erfasse ich alle
TastendrÅcke korrekt, wie kann ich ein Nachlaufen (im Editor)
wirkungsvoll verhindern ..... etc.

* ES IST FALSCH, einfach nur die Scancodes auszuwerten. Das ergibt
Programme, die auf 'fremden' Tastaturen Z und Y nicht unterscheiden
kînnen.

* ES IST FALSCH, einen komplett neuen Tastaturtreiber zu schreiben.
Dann freuen sich die anderen Applikationen (ACC's etc!). Der User
Åbrigens auch.

* KEINE TASTENKOMBINATION IST UNGöLTIG. (MURPHY'S LAW!). Der Scancode
NULL kann durchaus vorkommen - nÑmlich immer dann, wenn ein
zusammengesetzter Buchstabe kommt. Auch TOS 3.06 und 2.06 tun das.

* Damit der Extkey-Modus immer funktioniert, mÅssen zwei Regeln
beachtet werden:
  1. BACKSPACE (Scan $0E, ASCII $08) muû immer ausgefÅhrt werden, auch
in Verbindung mit der CONTROL, SHIFT oder ALT Taste.
  2. Sehr schnelle Tastenfolgen dÅrfen nicht unterdrÅckt werden. Extkey
und auch Compose im Multichar-mode senden typischerweise bei _einer_
TastenbetÑtigung zwei Codes:
  BackSpace, NewChar.
Wobei NewChar den Scancode Null besitzt.

* Die NKCC Routinen von Harald Siegmund, die dem RCS 'Interface'
beiliegen, sind sauber aufgebaut. Sie arbeiten bis auf zwei Ausnahmen
korrekt: ALT-nnn mit Werten unter 32 ergibt die Meldung 'NKC_INVALID',
und bei COMPOSE wird irrtÅmlich die ALT-Taste als gedrÅckt gemeldet!


=======================================================================


ANHANG 2:
STANDARD-COMPOSE-TABELLEN
=======================================================================

#  + +
^  ^ ^
|  | `-- zweites Tastaturzeichen
|  `---- erstes Tastaturzeichen
`------- ergibt dieses (Compose) Zeichen!

Wenn weitere Kombinationen exisitieren, sind diese durch Kommata
abgetrennt.


----------------
#  + +
@  a a , A A
[  ( (
\  / /
]  ) )
{  ( -
|  / ^
}  ) -
Ä  C ,
Å  u "
Ç  e '
É  a ^
Ñ  a "
Ö  a `
Ü  a .
á  c ,
à  e ^
â  e "
ä  e `
ã  i "
å  i ^
ç  i `
é  A "
è  A .
ê  E '
ë  a e
í  A e
í  A E
ì  o ^
î  o "
ï  o `
ñ  u ^
ó  u `
ò  y "
ô  O "
ö  U "
õ  c / , C / , c | , C |
ú  L - , l - , L _ , l _
ù  y - , y = , Y - , Y =
û  P t , p t    (Peseta)
ü  f -
†  a '
°  i '
¢  o '
£  u '
§  n ~
•  N ~
¶  a - , a _
ß  o - , o _
®  ? ?
´  1 2
¨  1 4
≠  ! !
Æ  < <
Ø  > >
∞  a ~
±  o ~
≤  O / , O |
≥  o / , o |
¥  o e
µ  O E , O e
∂  A `
∑  A ~
∏  O ~
π    "
∫    '
ª    +
º  P P , P | , P /
º  p p , p | , p /
Ω  c o , C O
æ  r o , R O
ø  t m , T M
¿  i j
¡  I J , I j

›  S O , s o
ﬁ    ^
ﬂ  O O , o o
û  s s    (BETA, EsZet)
„  P I , p i
‰  S S
Ê  u / , u |
È  O -
  = -
Ò  + -
Ú  > - , > _ , > =
Û  < - , < _ , < =
ˆ  : -
˜  = ~
¯    o  (SPACE + o)
˘    *  (SPACE + *)
˙    .  ( id...)
˚    v
¸    n
˝    2
˛    3
ˇ    _

----------------

=======================================================================
- text written 920202 by @pf68030 -------------------------------------
=======================================================================

